generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "../src/.prisma/ppy.sb"
}

datasource db {
  provider = "mysql"
  url      = env("DB_DSN")
}

model User {
  id              Int     @id @default(autoincrement())
  name            String  @unique(map: "users_name_uindex") @db.VarChar(32)
  safeName        String  @unique(map: "users_safe_name_uindex") @map("safe_name") @db.VarChar(32)
  email           String  @unique(map: "users_email_uindex") @db.VarChar(254)
  priv            Int     @default(1)
  pwBcrypt        String  @map("pw_bcrypt") @db.Char(60)
  country         String  @default("xx") @db.Char(2)
  silenceEnd      Int     @default(0) @map("silence_end")
  donorEnd        Int     @default(0) @map("donor_end")
  creationTime    Int     @default(0) @map("creation_time")
  latestActivity  Int     @default(0) @map("latest_activity")
  preferredMode   Int     @default(0) @map("preferred_mode")
  playStyle       Int     @default(0) @map("play_style")
  customBadgeName String? @map("custom_badge_name") @db.VarChar(16)
  customBadgeIcon String? @map("custom_badge_icon") @db.VarChar(64)
  userpageContent String? @map("userpage_content") @db.VarChar(2048)
  clanId          Int     @default(0) @map("clan_id")
  clanPriv        Int     @default(0) @map("clan_priv") @db.TinyInt
  apiKey          String? @unique(map: "users_api_key_uindex") @map("api_key") @db.Char(36)

  clan             Clan           @relation(name: "clan", fields: [clanId], references: [id])
  favourites       Favourite[]
  ingameLogins     IngameLogin[]
  receivedMessages Mail[]         @relation("receivedMessages")
  sentMessages     Mail[]         @relation("sentMessages")
  clientHashes     ClientHash[]
  comments         Comment[]
  ownedClans       Clan[]         @relation("owner")
  relations        Relationship[] @relation("from")
  gotRelations     Relationship[] @relation("to")
  stat             Stat[]
  userpages        Userpage[]
  Score            Score[]

  @@map("users")
}

model ClientHash {
  userId      Int      @map("userid")
  osuPath     String   @map("osupath") @db.Char(32)
  iFaces      String   @map("adapters") @db.Char(32)
  uninstallId String   @map("uninstall_id") @db.Char(32)
  diskSerial  String   @map("disk_serial") @db.Char(32)
  latestTime  DateTime @map("latest_time") @db.DateTime(0)
  occurrences Int      @default(0)

  user User @relation(fields: [userId], references: [id])

  @@id([userId, osuPath, iFaces, uninstallId, diskSerial])
  @@map("client_hashes")
}

model Comment {
  id         Int            @id @default(autoincrement())
  targetId   Int            @map("target_id")
  targetType CommentsTarget @map("target_type")
  userId     Int            @map("userid")
  time       Int
  comment    String         @db.VarChar(80)
  colour     String?        @db.Char(6)

  user User @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Clan {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "clans_name_uindex") @db.VarChar(16)
  tag       String   @unique(map: "clans_tag_uindex") @db.VarChar(6)
  ownerId   Int      @unique(map: "clans_owner_uindex")
  createdAt DateTime @map("created_at") @db.DateTime(0)

  joinedUsers User[] @relation("clan")
  owner       User   @relation(name: "owner", fields: [ownerId], references: [id])

  @@map("clans")
}

model Favourite {
  userId    Int @map("userid")
  setId     Int @map("setid")
  createdAt Int @default(0) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  source Source @relation(fields: [setId], references: [id])

  @@id([userId, setId])
  @@map("favourites")
}

model IngameLogin {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("userid")
  ip        String   @db.VarChar(45)
  osuVer    DateTime @map("osu_ver") @db.Date
  osuStream String   @map("osu_stream") @db.VarChar(128)
  datetime  DateTime @db.DateTime(0)

  user User @relation(fields: [userId], references: [id])

  @@map("ingame_logins")
}

model Log {
  id   Int      @id @default(autoincrement())
  from Int
  to   Int
  msg  String?  @db.VarChar(2048)
  time DateTime @db.DateTime(0)

  // action String @db.VarChar(32)

  @@map("logs")
}

model Mail {
  id       Int     @id @default(autoincrement())
  fromId   Int     @map("from_id")
  targetId Int     @map("to_id")
  msg      String  @db.VarChar(2048)
  time     Int?
  read     Boolean @default(false)

  fromUser   User @relation(name: "sentMessages", fields: [fromId], references: [id])
  targetUser User @relation(name: "receivedMessages", fields: [targetId], references: [id])

  @@map("mail")
}

model Channel {
  id        Int     @id @default(autoincrement())
  name      String  @unique(map: "channels_name_uindex") @db.VarChar(32)
  topic     String  @db.VarChar(256)
  readPriv  Int     @default(1) @map("read_priv")
  writePriv Int     @default(2) @map("write_priv")
  autoJoin  Boolean @default(false) @map("auto_join")

  @@map("channels")
}

model Map {
  server      SourceEnum @default(bancho)
  id          Int        @unique(map: "maps_id_uindex")
  setId       Int        @map("set_id")
  status      Int
  md5         String     @unique(map: "maps_md5_uindex") @db.Char(32)
  artist      String     @db.VarChar(128)
  title       String     @db.VarChar(128)
  version     String     @db.VarChar(128)
  creator     String     @db.VarChar(19)
  filename    String     @db.VarChar(256)
  lastUpdate  DateTime   @map("last_update") @db.DateTime(0)
  totalLength Int        @map("total_length")
  maxCombo    Int        @map("max_combo")
  frozen      Boolean    @default(false)
  plays       Int        @default(0)
  passes      Int        @default(0)
  mode        Int        @default(0) @db.TinyInt
  bpm         Float      @default(0.00) @db.Float
  cs          Float      @default(0.00) @db.Float
  ar          Float      @default(0.00) @db.Float
  od          Float      @default(0.00) @db.Float
  hp          Float      @default(0.00) @db.Float
  diff        Float      @default(0.000) @db.Float

  source Source  @relation(fields: [setId, server], references: [id, server])
  Score  Score[]

  @@id([server, id])
  @@index([filename], map: "filename")
  @@map("maps")
}

model Source {
  server          SourceEnum @default(bancho)
  id              Int        @unique(map: "nmapsets_id_uindex")
  lastOsuApiCheck DateTime   @default(now()) @map("last_osuapi_check") @db.DateTime(0)

  favouredBy Favourite[]
  Map        Map[]

  @@id([server, id])
  @@map("mapsets")
}

model PerformanceReport {
  scoreId          BigInt  @map("scoreid") @db.UnsignedBigInt
  ruleset          Ruleset @default(standard) @map("mod_mode")
  os               String  @db.VarChar(64)
  fullscreen       Boolean
  fpsCap           String  @map("fps_cap") @db.VarChar(16)
  compatibility    Boolean
  version          String  @db.VarChar(16)
  startTime        Int     @map("start_time")
  endTime          Int     @map("end_time")
  frameCount       Int     @map("frame_count")
  spikeFrames      Int     @map("spike_frames")
  aimRate          Int     @map("aim_rate")
  completion       Boolean
  identifier       String? @db.VarChar(128)
  averageFrametime Int     @map("average_frametime")

  @@id([scoreId, ruleset])
  @@map("performance_reports")
}

model Rating {
  userId Int    @map("userid")
  mapMd5 String @map("map_md5") @db.Char(32)
  rating Int    @db.TinyInt

  @@id([userId, mapMd5])
  @@map("ratings")
}

model Relationship {
  fromUserId Int              @map("user1")
  toUserId   Int              @map("user2")
  type       RelationshipType

  fromUser User @relation(name: "from", fields: [fromUserId], references: [id])
  toUser   User @relation(name: "to", fields: [toUserId], references: [id])

  @@id([fromUserId, toUserId])
  @@map("relationships")
}

model Score {
  id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  mapMd5         String   @map("map_md5") @db.Char(32)
  score          Int
  pp             Float    @db.Float
  acc            Float    @db.Float
  maxCombo       Int      @map("max_combo")
  mods           Int
  n300           Int
  n100           Int
  n50            Int
  nmiss          Int
  ngeki          Int
  nkatu          Int
  grade          String   @default("N") @db.VarChar(2)
  status         Int      @db.TinyInt
  mode           Int      @db.TinyInt
  playTime       DateTime @map("play_time") @db.DateTime(0)
  timeElapsed    Int      @map("time_elapsed")
  clientFlags    Int      @map("client_flags")
  userId         Int      @map("userid")
  perfect        Boolean
  onlineChecksum String   @map("online_checksum") @db.Char(32)

  beatmap Map? @relation(fields: [mapMd5], references: [md5])
  user    User @relation(fields: [userId], references: [id])

  @@index([mapMd5], map: "map_md5")
  @@index([userId], map: "userid")
  @@map("scores")
}

model Startup {
  id       Int      @id @default(autoincrement())
  verMajor Int      @map("ver_major") @db.TinyInt
  verMinor Int      @map("ver_minor") @db.TinyInt
  verMicro Int      @map("ver_micro") @db.TinyInt
  datetime DateTime @db.DateTime(0)

  @@map("startups")
}

model Stat {
  id          Int    @default(autoincrement())
  mode        Int    @db.TinyInt
  totalScore  BigInt @default(0) @map("tscore") @db.UnsignedBigInt
  rankedScore BigInt @default(0) @map("rscore") @db.UnsignedBigInt
  pp          Int    @default(0) @db.UnsignedInt
  plays       Int    @default(0) @db.UnsignedInt
  playTime    Int    @default(0) @map("playtime") @db.UnsignedInt
  accuracy    Float  @default(0.000) @map("acc") @db.Float
  maxCombo    Int    @default(0) @map("max_combo") @db.UnsignedInt
  totalHits   Int    @default(0) @map("total_hits") @db.UnsignedInt
  replayViews Int    @default(0) @map("replay_views") @db.UnsignedInt
  xhCount     Int    @default(0) @map("xh_count") @db.UnsignedInt
  xCount      Int    @default(0) @map("x_count") @db.UnsignedInt
  shCount     Int    @default(0) @map("sh_count") @db.UnsignedInt
  sCount      Int    @default(0) @map("s_count") @db.UnsignedInt
  aCount      Int    @default(0) @map("a_count") @db.UnsignedInt

  user User @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "stats_ibfk_1")

  @@id([id, mode])
  @@map("stats")
}

model TourneyPool {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(16)
  createdAt DateTime @map("created_at") @db.DateTime(0)
  createdBy Int      @map("created_by")

  @@index([createdBy], map: "tourney_pools_users_id_fk")
  @@map("tourney_pools")
}

model UserAchievement {
  userId        Int @map("userid")
  achievementId Int @map("achid")

  @@id([userId, achievementId])
  @@map("user_achievements")
}

model Achievement {
  id   Int    @id @default(autoincrement())
  file String @unique(map: "achievements_file_uindex") @db.VarChar(128)
  name String @unique(map: "achievements_name_uindex") @db.VarChar(128)
  desc String @unique(map: "achievements_desc_uindex") @db.VarChar(256)
  cond String @db.VarChar(64)

  @@map("achievements")
}

model MapRequest {
  id        Int      @id @default(autoincrement())
  map_id    Int
  player_id Int
  datetime  DateTime @db.DateTime(0)
  active    Boolean

  @@map("map_requests")
}

model LackMap {
  md5       String @id @db.VarChar(255)
  lack_type String @db.VarChar(255)

  @@map("maps_lack")
}

model TourneyPoolMap {
  map_id  Int
  pool_id Int
  mods    Int
  slot    Int @db.TinyInt

  @@id([map_id, pool_id])
  @@index([pool_id], map: "tourney_pool_maps_tourney_pools_id_fk")
  @@map("tourney_pool_maps")
}

model Userpage {
  id      Int              @id @default(autoincrement())
  userId  Int              @map("user_id")
  html    String?          @db.Text
  raw     String?          @db.Text
  rawType UserpageRawType? @map("raw_type")
  user    User             @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "fk_user")

  @@index([userId], map: "user_id")
  @@map("userpages")
}

enum SourceEnum {
  bancho        @map("osu!")
  privateServer @map("private")

  @@map("MapSource")
}

enum Ruleset {
  standard  @map("vanilla")
  relax
  autopilot

  @@map("PerformanceReportModMode")
}

enum CommentsTarget {
  replay
  map
  song

  @@map("CommentsTargetType")
}

enum RelationshipType {
  friend
  block
}

enum UserpageRawType {
  tiptap
}
